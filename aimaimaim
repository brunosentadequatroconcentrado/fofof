local redzlib = loadstring(game:HttpGet("https://pastebin.com/raw/vw88tmRu"))()
local Window = redzlib:MakeWindow({
    Title = "Teste Hub | Brasil Ilha Bela",
    SubTitle = "Powered By Raio.Hub Team",
    SaveFolder = "RaioHubClientCfg.lua" 
  })

local Tab2 = Window:MakeTab({"Pvp", "user"})
    
local player = game.Players.LocalPlayer

local toolsToMonitor = {"FAL", "AKM", "USP", "G17", "HK416", "MK47"}

local equippedTool = nil

local function onToolEquipped(tool)
    equippedTool = tool.Name
    print("Ferramenta equipada: " .. equippedTool)
end

local function onToolUnequipped(tool)
    if tool.Name == equippedTool then
        equippedTool = nil
        print("Ferramenta desequipada: " .. tool.Name)
    end
end

local function setupTool(tool)
    tool.Equipped:Connect(function() onToolEquipped(tool) end)
    tool.Unequipped:Connect(function() onToolUnequipped(tool) end)
end

local function setupCharacter(character)
    for _, toolName in ipairs(toolsToMonitor) do
        local tool = player.Backpack:FindFirstChild(toolName)
        if tool and tool:IsA("Tool") then
            setupTool(tool)
        end
    end

    player.Backpack.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and table.find(toolsToMonitor, child.Name) then
            setupTool(child)
        end
    end)
end

setupCharacter(player.Character or player.CharacterAdded:Wait())

player.CharacterAdded:Connect(setupCharacter)

local fov = 0
local RunService = game:GetService("RunService")
local Cam = game.Workspace.CurrentCamera
local Players = game:GetService("Players")
local GetPlayers = Players.GetPlayers
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local WeaponsSystem = ReplicatedStorage:WaitForChild("WeaponsSystem")
local Network = WeaponsSystem:WaitForChild("Network")
local WeaponFired = Network:WaitForChild("WeaponFired")
local WeaponHit = Network:WaitForChild("WeaponHit")

local FOVring = Drawing.new("Circle")
FOVring.Visible = true
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(128, 0, 128)
FOVring.Filled = true
FOVring.Radius = fov
FOVring.Position = Cam.ViewportSize / 2
FOVring.Transparency = 0.1

local weaponFired = false

WeaponFired.OnClientEvent:Connect(function(player)
    if player == LocalPlayer then
        weaponFired = true
    end
end)

local allowedTeams = {
    "",
    "",
    "",
}

local function isTeamAllowed(teamName)
    for _, allowedTeam in ipairs(allowedTeams) do
        if teamName == allowedTeam then
            return true
        end
    end
    return false
end

local function GetPlayerTeamCheck(Self, Target)
    return Self.TeamColor == Target.TeamColor and isTeamAllowed(Self.Team.Name)
end

local function CheckWalls(target)
    local character = LocalPlayer.Character
    if not character then return false end
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return false end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return false end
    local head = target.Character:FindFirstChild("Head")
    if not head then return false end
    local ray = Ray.new(rootPart.Position, (head.Position - rootPart.Position))
    local hit, position = Workspace:FindPartOnRayWithIgnoreList(ray, {character, target.Character})
    return hit ~= nil and hit ~= target.Character
end

local function updateDrawings()
    local camViewportSize = Cam.ViewportSize
    FOVring.Position = camViewportSize / 2
end

RunService.RenderStepped:Connect(function()
    if weaponFired then
        updateDrawings()
        local playersInFOV = {}
        local closestPlayer = nil
        local closestDistance = math.huge
        for _, player in ipairs(GetPlayers(Players)) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                local PlrPosition = player.Character.Head.Position
                local screenPoint = Cam:WorldToViewportPoint(PlrPosition)
                local distance = math.sqrt((screenPoint.X - FOVring.Position.X)^2 + (screenPoint.Y - FOVring.Position.Y)^2) -- Usando a função de distância mais eficiente
                if distance <= fov then
                    if not GetPlayerTeamCheck(LocalPlayer, player) then
                        if not CheckWalls(player) then
                            table.insert(playersInFOV, player)
                            if distance < closestDistance then
                                closestDistance = distance
                                closestPlayer = player
                            end
                        end
                    end
                end
            end
        end
        if closestPlayer then
            local PlrPosition = closestPlayer.Character.Head.Position
            local args = {
                [1] = LocalPlayer.Character[equippedTool],
                [2] = {
                    ["p"] = Vector3.new(PlrPosition),
                    ["pid"] = 1,
                    ["part"] = closestPlayer.Character.Head,
                    ["d"] = 9.4015474319458,
                    ["maxDist"] = 9.386301040649414,
                    ["h"] = closestPlayer.Character.Humanoid,
                    ["m"] = Enum.Material.Plastic,
                    ["n"] = Vector3.new(0.148040771484375, -0.02169330231845379, -0.9887434244155884),
                    ["t"] = 0.4358314635418554,
                    ["sid"] = 1
                },
                [3] = true
            }
            WeaponHit:FireServer(unpack(args))
        end
        weaponFired = false
    end
end)

Tab2:AddSlider({
    Name = "Fov Aimbot",
    Min = 0,
    Max = 550,
    Increase = 5,
    Default = 50,
    Callback = function(Value)
        fov = Value
        FOVring.Radius = fov
    end
})

  Window:Minimize() 

Window:Minimize() 

Window:AddMinimizeButton({
  Button = {
    Image = "rbxassetid://16550588402"
  },
  UICorner = {true,
    CornerRadius = UDim.new(0.5, 0)
  },
  UIStroke = {false, {
  }}
})
